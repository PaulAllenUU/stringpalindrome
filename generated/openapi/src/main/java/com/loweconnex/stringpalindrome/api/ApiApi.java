/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.1.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.loweconnex.stringpalindrome.api;

import com.loweconnex.stringpalindrome.model.ErrorModel;
import com.loweconnex.stringpalindrome.model.InputStringRequest;
import com.loweconnex.stringpalindrome.model.InputStringResponse;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-12-10T02:42:51.496236500Z[Europe/London]")
@Validated
@Tag(name = "api", description = "the api API")
public interface ApiApi {

    /**
     * POST /api/checkInputStringRequest
     * Takes an input string and checks if the string is a palindrome
     *
     * @param inputStringRequest  (required)
     * @return Success (status code 200)
     *         or Unauthorised (status code 401)
     *         or Media type not supported (status code 415)
     *         or Bad request (status code 404)
     *         or Internal server error (status code 500)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "checkInputStringRequest",
        description = "Takes an input string and checks if the string is a palindrome",
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = InputStringResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorised", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorModel.class))
            }),
            @ApiResponse(responseCode = "415", description = "Media type not supported", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorModel.class))
            }),
            @ApiResponse(responseCode = "404", description = "Bad request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorModel.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorModel.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorModel.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/checkInputStringRequest",
        produces = "application/json",
        consumes = "application/json"
    )
    
    ResponseEntity<InputStringResponse> checkInputStringRequest(
        @Parameter(name = "InputStringRequest", description = "", required = true) @Valid @RequestBody InputStringRequest inputStringRequest
    );

}
